<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="eddie.project.cinemabookingsystemgenericdao.mapper.BookMapper">

    <resultMap id="bookResultMap" type="eddie.project.cinemabookingsystemgenericdao.entity.Book">
        <id property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="movieId" column="movie_id"/>
        <result property="seatId" column="seat_id"/>
        <result property="status" column="status"/>
        <result property="bookTime" column="book_time"/>
        <result property="payTime" column="pay_time"/>
    </resultMap>
    <resultMap id="OrderCountMap" type="eddie.project.cinemabookingsystemgenericdao.dto.book.OrderCount">
        <result property="userId" column="user_id"/>
        <result property="movieId" column="movie_id"/>
        <result property="bookTime" column="book_time"/>
        <result property="payTime" column="pay_time"/>
        <result property="orderCount" column="order_count"/>
    </resultMap>


    <insert id="insertBook">
        INSERT INTO books (user_id, movie_id, seat_id, status, book_time, pay_time)
        VALUES (#{userId}, #{movieId}, #{seatId}, #{status}, #{bookTime}, #{payTime})
    </insert>

    <select id="findById" parameterType="int" resultMap="bookResultMap">
        SELECT * FROM books WHERE id=#{id}
    </select>

    <select id="findAll">
        SELECT * FROM books
    </select>

    <select id="findBookByUserId" resultMap="bookResultMap">
        SELECT * FROM books WHERE user_id = #{userId}
    </select>

    <select id="findByPaidStatus" resultMap="bookResultMap">
        SELECT * FROM books WHERE status = #{status}
    </select>

    <select id="findBooksByDateRange" resultMap="bookResultMap">
        SELECT * FROM books
        WHERE book_time BETWEEN #{startDate} AND #{endDate}
    </select>

    <select id="findBooksByMovieId" resultMap="bookResultMap">
        SELECT * FROM books WHERE movie_id = #{movieId}
    </select>

    <select id="findBookPaidCountByUser" resultMap="OrderCountMap">
        SELECT b.user_id, b.movie_id, b.book_time, b.pay_time
        FROM books b
                 JOIN (
            SELECT user_id, COUNT(*) AS paid_count
            FROM books
            WHERE status = #{status}
            GROUP BY user_id
        ) t ON b.user_id = t.user_id
        WHERE b.status = #{status}
        ORDER BY t.paid_count DESC, b.user_id DESC;
    </select>

    <select id="findMovieOrderCount" resultMap="OrderCountMap">
        SELECT movie_id, COUNT(*) AS order_count
        FROM books
        GROUP BY movie_id
        ORDER BY order_count DESC
    </select>

    <select id="findMovieOrderPaidCount" resultMap="OrderCountMap">
        SELECT b.movie_id,
               MAX(b.book_time) AS book_time,
               MAX(b.pay_time) AS pay_time,
               t.paid_count AS order_count
        FROM books b
                 JOIN (
            SELECT movie_id, COUNT(*) AS paid_count
            FROM books
            WHERE status = #{status}
            GROUP BY movie_id
        ) t ON b.movie_id = t.movie_id
        WHERE b.status = #{status}
        GROUP BY b.movie_id, t.paid_count
        ORDER BY t.paid_count DESC, b.movie_id DESC;
    </select>

    <select id="findMovieOrderPaidCountTimeRange" resultMap="OrderCountMap">
        SELECT b.movie_id,
               MAX(b.book_time) AS book_time,
               MAX(b.pay_time) AS pay_time,
               t.paid_count AS order_count
        FROM books b
                 JOIN (
            SELECT movie_id, COUNT(*) AS paid_count
            FROM books
            WHERE status = #{status}
              AND book_time BETWEEN #{startDate} AND #{endDate}
            GROUP BY movie_id
        ) t ON b.movie_id = t.movie_id
        WHERE b.status = #{status}
          AND b.book_time BETWEEN #{startDate} AND #{endDate}
        GROUP BY b.movie_id, t.paid_count
        ORDER BY t.paid_count DESC, b.movie_id DESC;
    </select>
    <select id="bookSeatCheck" parameterType="int" resultType="java.lang.String">
        SELECT seat_id FROM books
        WHERE movie_id = #{movieId} AND status != 2
    </select>


    <update id="updateBook">
        UPDATE books
        SET user_id = #{userId}, movie_id = #{movieId}, seat_id = #{seatId}, status = #{status}, book_time = #{bookTime}, pay_time = #{payTime}
        WHERE id = #{id}
    </update>

    <update id="deleteBook">
        UPDATE books
        SET seat_id=NULL, status=NULL
        WHERE id=#{id}
    </update>
</mapper>
